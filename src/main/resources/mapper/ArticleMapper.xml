<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.myblog.mapper.ArticleMapper">

    <resultMap id="BaseResultMap" type="com.example.myblog.entity.Article">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="author" jdbcType="VARCHAR" property="author"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="content" jdbcType="VARCHAR" property="content"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="refresh_time" jdbcType="TIMESTAMP" property="refreshTime"/>
    </resultMap>

    <sql id="AllColumns">
        id,author,title,content,create_time,refresh_time
    </sql>

    <insert id="insert" parameterType="com.example.myblog.entity.Article">

        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID() as id
        </selectKey>

        insert into t_article (
        author,title,content,create_time,refresh_time)
        values (
        #{author},
        #{title},
        #{content},
        #{createTime},
        #{refreshTime}
        )
    </insert>

    <delete id="deleteById" parameterType="java.lang.Long">

        delete from t_article
        where id=#{id}

    </delete>

    <update id="update" parameterType="com.example.myblog.entity.Article">

        update t_article
        set
        author=#{author},
        title=#{title},
        content=#{content},
        create_time=#{createTime},
        refresh_time=#{refreshTime}
        where
        id=#{id}
    </update>


    <select id="selectById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="AllColumns"/>
        from t_article
        where id=#{id}
    </select>


    <select id="page" resultMap="BaseResultMap">
        select
        <include refid="AllColumns"/>
        from
        t_article
        where
        <where>
            <if test="title != null and title != ''">
                and title like CONCAT('%',#{title},'%')
            </if>
            <if test="content != null and content !=''">
                and content like CONCAT('%',#{content},'%')
            </if>
        </where>

        <choose>
            <when test="articleId != null and articleId.name() == 'ASC'">
                order by id ASC
            </when>
            <when test="articleId != null and articleId.name() == 'DESC'">
                order by id DESC
            </when>


            <when test="articleCreateTime != null and articleCreateTime.name() == 'ASC'">
                order by create_time ASC
            </when>
            <when test="articleCreateTime != null and articleCreateTime.name() == 'DESC'">
                order by create_time DESC
            </when>

            <when test="articleRefreshTime != null and articleRefreshTime.name() == 'ASC'">
                order by refresh_time ASC
            </when>
            <when test="articleRefreshTime != null and articleRefreshTime.name() == 'DESC'">
                order by refresh_time DESC
            </when>

            <otherwise></otherwise>

        </choose>

    </select>

    <select id="queryAll" resultType="com.example.myblog.entity.Article" resultMap="BaseResultMap">

        select
<!--        <include refid="AllColumns"/>-->
        *
        from
        t_article

    </select>


</mapper>